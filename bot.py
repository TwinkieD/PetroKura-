import asyncio
import csv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder

API_TOKEN = "7635754983:AAEoLA9QU0Aebg-M7a7NjRkZWUPKK5JrWaY"
ADMIN_CHAT_ID = 7569576915

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def start_keyboard():
    return ReplyKeyboardBuilder().add(
        KeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"),
        KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ")
    ).as_markup(resize_keyboard=True)

def phone_keyboard():
    return ReplyKeyboardBuilder().add(
        KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    ).as_markup(resize_keyboard=True)

def confirm_keyboard():
    return ReplyKeyboardBuilder().add(
        KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
        KeyboardButton(text="üîô –ù–∞–∑–∞–¥"),
        KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    ).as_markup(resize_keyboard=True)

def admin_inline_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", callback_data=f"ready_{user_id}")
    ]])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def save_order(user_id, name, phone, content, address, payment):
    with open("orders.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now().isoformat(), user_id, name, phone, content, address, payment])

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
async def notify_admin(user_id, name, phone, content, address, payment, photo_id=None):
    text = (
        f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
        f"üë§ *–ò–º—è:* {name} (ID: `{user_id}`)\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"üìç *–ê–¥—Ä–µ—Å:* {address}\n"
        f"üõí *–ó–∞–∫–∞–∑:* {content}\n"
        f"üí≥ *–û–ø–ª–∞—Ç–∞:* {payment}"
    )
    markup = admin_inline_keyboard(user_id)
    if photo_id:
        await bot.send_photo(ADMIN_CHAT_ID, photo=photo_id, caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        await bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown", reply_markup=markup)

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"name": message.from_user.full_name}
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏ üõí",
        reply_markup=start_keyboard()
    )

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message(F.contact)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    user_data.setdefault(user_id, {})["phone"] = message.contact.phone_number
    await message.answer("üì• –ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")

# –§–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    user_data.setdefault(user_id, {})["photo"] = message.photo[-1].file_id
    await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.callback_query(F.data.startswith("ready_"))
async def handle_admin_ready(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_CHAT_ID:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.")
        return

    user_id = int(callback.data.split("_")[1])
    state = user_data.get(user_id)
    if not state:
        await callback.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await bot.send_message(user_id, "üõí –ö—É—Ä—å–µ—Ä —Å–æ–±—Ä–∞–ª –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É. –°–µ–π—á–∞—Å –æ–Ω —É–∫–∞–∂–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É.")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4700):")

    state["admin_step"] = "waiting_price_input"
    state["admin_chat_id"] = callback.from_user.id
    await callback.answer()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message(F.text)
async def universal_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_data.setdefault(user_id, {})

    # –í–≤–æ–¥ —Å—É–º–º—ã –æ—Ç –∞–¥–º–∏–Ω–∞
    if message.from_user.id == ADMIN_CHAT_ID and text.isdigit():
        for uid, s in user_data.items():
            if s.get("admin_step") == "waiting_price_input":
                s["total_price"] = text
                s["awaiting_payment"] = True
                s["admin_step"] = None

                await bot.send_message(
                    uid,
                    f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {text}‚Ç∏ (–≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É).\n\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ *Kaspi* –Ω–∞ –Ω–æ–º–µ—Ä *+77762266381* "
                    f"–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üí∏ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞\".",
                    parse_mode="Markdown",
                    reply_markup=ReplyKeyboardBuilder().add(
                        KeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞")
                    ).as_markup(resize_keyboard=True)
                )
                await message.answer("‚úÖ –°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É.")
                return

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if state.get("feedback"):
        await bot.send_message(ADMIN_CHAT_ID, f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {state['name']}:\n{text}")
        state.pop("feedback")
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.", reply_markup=start_keyboard())
        return

    # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if state.get("finished"):
        if text == "üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑":
            user_data[user_id] = {"name": message.from_user.full_name}
            await message.answer("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard())
        else:
            await message.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ üõí, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ":
        state["feedback"] = True
        await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
        return

    # –û—Ç–º–µ–Ω–∞
    if text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        user_data.pop(user_id, None)
        await message.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=start_keyboard())
        return

    # –ù–∞–∑–∞–¥
    if text == "üîô –ù–∞–∑–∞–¥":
        for key in ["photo", "address", "products"]:
            if key in state:
                state.pop(key)
                await message.answer(f"üîÅ –ù–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ {key}.")
                return
        await start_cmd(message)
        return

    # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
    if text == "üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑":
        user_data[user_id] = {"name": message.from_user.full_name}
        await message.answer("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard())
        return

    # –®–∞–≥–∏
    if "phone" not in state:
        await message.answer("üì± –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=phone_keyboard())
        return

    if "products" not in state:
        state["products"] = text
        await message.answer("üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return

    if "address" not in state:
        state["address"] = text
        state["payment"] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        await message.answer("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.", reply_markup=confirm_keyboard())
        return

    if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await notify_admin(
            user_id, state["name"], state["phone"],
            state["products"], state["address"],
            state["payment"], state.get("photo")
        )
        save_order(user_id, state["name"], state["phone"], state["products"], state["address"], state["payment"])
        state["finished"] = False
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫—É—Ä—å–µ—Ä–∞.", reply_markup=ReplyKeyboardRemove())
        return

    if text == "üí∏ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞":
        if not state.get("awaiting_payment"):
            await message.answer("‚õî –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –æ–ø–ª–∞—Ç—ã.")
            return

        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º {state['name']} (ID: {user_id})"
        )

        state["awaiting_payment"] = False
        state["finished"] = True

        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ö—É—Ä—å–µ—Ä —É–∂–µ –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º.",
            reply_markup=ReplyKeyboardRemove()
        )

        new_order_kb = ReplyKeyboardBuilder().add(
            KeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
        ).as_markup(resize_keyboard=True)

        await message.answer("üõç –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?", reply_markup=new_order_kb)
        return

# –ó–∞–ø—É—Å–∫
async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(3)

if __name__ == "__main__":
    asyncio.run(main())
