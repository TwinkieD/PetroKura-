import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("7635754983:AAEoLA9QU0Aebg-M7a7NjRkZWUPKK5JrWaY")
ADMIN_CHAT_ID = int(os.getenv("7569576915"))

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
user_data = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def start_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
    return kb.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
def cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")]
        ],
        resize_keyboard=True
    )

@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.full_name
    user_data[user_id] = {"name": name}
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏.", reply_markup=start_keyboard())

@dp.message(F.text == "üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def new_order(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["step"] = "get_products"
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=cancel_keyboard())

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("‚¨ÖÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=start_keyboard())

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def cancel_order(message: types.Message):
    user_data.pop(message.from_user.id, None)
    await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=start_keyboard())

@dp.message(F.content_type == "photo")
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        photo = message.photo[-1]
        file_id = photo.file_id
        user_data[user_id]['photo'] = file_id
        await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.")
    else:
        await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")

@dp.message()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    state = user_data.get(user_id)

    if not state or "step" not in state:
        await message.answer("‚ùó –ù–∞–∂–º–∏—Ç–µ ¬´üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    if state["step"] == "get_products":
        state["products"] = message.text
        state["step"] = "get_address"
        await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=cancel_keyboard())
        return

    if state["step"] == "get_address":
        state["address"] = message.text
        state["step"] = "confirm"
        name = state.get("name", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        await message.answer(
            f"üõí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {state['address']}\n"
            f"üìù –ü—Ä–æ–¥—É–∫—Ç—ã:\n{state['products']}\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É: 800‚Ç∏\n"
            f"–í –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã: +300‚Ç∏",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
                    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")]
                ],
                resize_keyboard=True
            )
        )
        return

    if state["step"] == "confirm":
        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
            content = state["products"]
            address = state["address"]
            photo_id = state.get("photo")

            text = (
                f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {state['name']} (ID: {user_id})\n\n"
                f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                f"üìù –ü—Ä–æ–¥—É–∫—Ç—ã:\n{content}"
            )

            if photo_id:
                await bot.send_photo(ADMIN_CHAT_ID, photo=photo_id, caption=text)
            else:
                await bot.send_message(ADMIN_CHAT_ID, text)

            await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫—É—Ä—å–µ—Ä–∞.",
                                 reply_markup=ReplyKeyboardRemove())

            user_data[user_id]['step'] = "waiting_payment"
            return

        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
            user_data.pop(user_id, None)
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=start_keyboard())
            return

    if state["step"] == "waiting_payment":
        if message.text == "üí∏ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞":
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ö—É—Ä—å–µ—Ä —É–∂–µ –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º.", reply_markup=start_keyboard())
            user_data.pop(user_id, None)

# ==== Webhook –¥–ª—è Render ====

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL)

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == '__main__':
    web.run_app(app, host="0.0.0.0", port=int(os.getenv('PORT', 10000)))
